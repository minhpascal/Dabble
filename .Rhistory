source('/data4/PythonStuff/Dabble/hkex-random-pf-generator-simple.r', echo=TRUE)
print z[2]
z[2]
z[,12]
z[,1:2]
z[,2:2]
z[:2]
z[2]
z[2:]
z[2:1]
z[1][1]
z[:1][1]
z[,1][1]
z[1][,1]
z[1,1
z[1,1}
z[1,1]
z[,1,1]
z[:1,1]
z[1]
z
z[2,5]
z[1:2,5]
z[1,1:5]
z[1:2,1:5]
ipfret
tickers
z
pfx
pfx=getSymbols(z[1][1])
get(pfx)
tail(get(pfx))
z
# here we reget data for a single stock
pfx=getSymbols(z[1][1])
pfxd=get(pfx) # get the data
# cal returns
pfxdret=Calculate.Returns(pfxd)
tail(pfxdret)
# here we reget data for a single stock
pfx=getSymbols(z[1][1])
pfxd=get(pfx) # get the data
# cal returns
pfxdret=Calculate.Return(pfxd)
tail(pfxdret)
pfxdret=CalculateReturns(pfxd)
tail(pfxdret)
Sharpe(pfxdret)
pfxdret=CalculateReturns(pfxd)
tail(pfxdret)
table.DownsideRiskRatio(pfxdret)
table.AnnualizedReturns(pfxdret)
re we reget data for a several stocks first of first pf
mpfx=getSymbols(z[1][1:5])
mpfxd=get(mpfx) # get the data
mpfx=getSymbols(z[1][1:5])
z[1][1:5]
z[1:2,1:5]
z[1][1:5]
z[1:1][1:5]
z[,1][1:5]
z[1:1][1:5]
z[1:2][1:5]
z[1:1,1:5]
mpfx=getSymbols(z[1:1,1:5])
mpfxd=get(mpfx) # get the data
mpfxd
tail(mpfxd)
mpfx
get(mpfx[2])
get(mpfx[3])
xx <- lapply(mpfx, function(i)get(mpfx[i]))
xx <- lapply(1:5, function(i)get(mpfx[i]))
xx
tail(xx0)
tail(xx)
# here we reget data for a several stocks first of first pf
mpfx=getSymbols(z[1:1,1:5])
xx <- lapply(1:5, function(i)get(mpfx[i]))
# calc returns
pfxdret=CalculateReturns(xx)
# show what we got and a some tables
tail(pfxdret)
table.DownsideRiskRatio(pfxdret)
table.AnnualizedReturns(pfxdret)
xx[,1]
xx[1]
xx[2]
xx[3]
pfxdret=CalculateReturns(xx[1:5])
# show what we got and a some tables
tail(pfxdret)
table.DownsideRiskRatio(pfxdret)
table.AnnualizedReturns(pfxdret)
pfxdret[2]
pfxdret[3]
xx
tail(xx[3])
tail(xx[1:3])
tail(xx[1])
xx[1]
tail(xx[1],2)
is.xts(xx[1])
as.zoo(xx[1])
as.zoo(xx)
xx <- lapply(1:5, function(i)as.zoo(get(mpfx[i])))
# calc returns
pfxdret=CalculateReturns(xx[1:5])
# show what we got and a some tables
tail(pfxdret)
table.DownsideRiskRatio(pfxdret)
table.AnnualizedReturns(pfxdret)
is.xts(xx)
# here we reget data for a several stocks first of first pf
mpfx=getSymbols(z[1:1,1:5])
allret=[]
for i in (1:5){
xx <- getmpfx[i]
# calc returns
xxret=CalculateReturns(xx)
colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
# show what we got and a some tables
tail(allret)
table.DownsideRiskRatio(allret)
table.AnnualizedReturns(allret)
allret=[]
for i in (1:5){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(xx)
colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
# show what we got and a some tables
tail(allret)
xx
tail(xx)
allret=[]
xx=NULL
for i in (1:5){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(xx)
colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
xx
mpfx
mpfx[1]
z[1:2,1:5]
# here we reget data for a single stock first of first pf
pfx=getSymbols(z[1][1])
pfxd=get(pfx) # get the data
# calc returns
pfxdret=CalculateReturns(pfxd)
# show what we got and a some tables
tail(pfxdret)
table.DownsideRiskRatio(pfxdret)
table.AnnualizedReturns(pfxdret)
mpfx=getSymbols(z[1:1,1:5])
allret=[]
xx=NULL
allret=NULL
xx=NULL
for i in (1:5){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(xx)
colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
allret=NULL
xx=NULL
for (i in (1:5)){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(xx)
colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
}
tail(allret)
table.DownsideRiskRatio(allret)
table.AnnualizedReturns(allret)
colnames(z)
rownames(z)
mpfx
mpfx[1]
allret=NULL
xx=NULL
for (i in (1:5)){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(xx)
colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
}
# show what we got and a some tables
tail(allret)
table.DownsideRiskRatio(allret)
table.AnnualizedReturns(allret)
allret=NULL
xx=NULL
for (i in (1:5)){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(xx)
#colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
}
# show what we got and a some tables
tail(allret)
table.DownsideRiskRatio(allret)
table.AnnualizedReturns(allret)
allret
tail(allret)
allret=NULL
xx=NULL
for (i in (1:5)){
xx <- get(mpfx[i])
# calc returns
xxret=CalculateReturns(Cl(xx))
#colnames(xxret)=colnames(mpfx[i])
allret=cbind(allret,xxret)
}
# show what we got and a some tables
tail(allret)
table.DownsideRiskRatio(allret)
table.AnnualizedReturns(allret)
table.Annualized.Sharpe(allret)
table.AnnualizedSharpe(allret)
help(PerformanceAnalytics)
table.SharpeRatio.annualized(allret)
table(SharpeRatio.annualized(allret))
table.SharpeRatio.annualized(allret)
SharpeRatio.annualized(allret)
max(SharpeRatio.annualized(allret))
which(max(SharpeRatio.annualized(allret)))
max(SharpeRatio.annualized(allret))
chart,QQPlot(allret)
chart.QQPlot(allret)
chart.QQPlot(allret[,1])
chart.QQPlot(allret[,2])
chart.QQPlot(allret[,3])
chart.QQPlot(allret[,4])
chart.QQPlot(allret[,5])
chart.QQPlot(allret[,4])
chart.QQPlot(allret[,3])
chart.QQPlot(allret[,2])
skewness(allret)
hsi
HSIret
HSI
hsiret
CAPM.RiskPremium(allret,Calculate.Returns(HSI))
CAPM.RiskPremium(allret,CalculateReturns(HSI))
CAPM.RiskPremium(allret[,1],CalculateReturns(HSI))
CAPM.RiskPremium(tail(allret[,1],100),tail(CalculateReturns(HSI),100)
)
InformationRatio(allret)
hsiret=CalculateReturns(HSI)
InformationRatio(allret,hsiret)
InformationRatio(allret,Cl(hsiret))
sort(InformationRatio(allret,Cl(hsiret)))
princomp(allret)
princomp(allret[,1])
sortDrawdowns(allret)
sortDrawdowns(na.omit(allret))
allret
allret2=na.omit(allret)
allret2
sortDrawdowns(allret)
table.Informationratio(allret)
table.InformationRatio(allret)
fromd="2010-01-01"
tod=Sys.Date()
# For later benchmark analysis we use the HSI
getSymbols("^HSI",from=fromd)
hsiret=CalculateRetruns(Cl(HSI)) # this now holds the HSI return series
colnames(hsiret)="HSI Index"
#tail(round(hsiret,4))
table.InformationRatio(allret,hsiret)
source('/data4/PythonStuff/Dabble/hkex-random-pf-generator-simple.r', echo=TRUE)
chart.StackedBar(allret)
chart.StackedBar(allret[,1])
chart.RelativePerformance(allret,hsiret)
chart.RelativePerformance(allret[,1],hsiret)
table.InformationRatio(allret,hsiret)
chart.RelativePerformance(allret[,1],hsiret)
table.InformationRatio(allret,hsiret)
chart.RelativePerformance(allret[,1],hsiret)
chart.RelativePerformance(pfxdret,hsiret)
table.Autocorrelation(allret)
chart.RelativePerformance(pfxdret[, 1:5, drop=FALSE],
hsiret[drop=FALSE],
colorset=rich8equal, legend.loc="bottomright",
main="Relative Performance to HSI")
pfxdret
pfxdret[, 1:5, drop=FALSE]
chart.RelativePerformance(pfxdret[, 1:5, drop=FALSE],
hsiret[drop=FALSE],
show.clean=TRUE, clean="boudt",
colorset=rich8equal, legend.loc="bottomright",
main="Relative Performance to HSI")
pfxdret[, 1:5, drop=FALSE,clean="boudt"]
na.omit(pfdxret)
na.omit(pfxdret)
Return.clean(pfxdret)
Return.clean(pfxdret,method="boudt")
Return.clean(pfxdret,method="geltner")
na.omit(Return.clean(pfxdret,method="geltner"))
na.omit(Return.clean(pfxdret,method="none"))
inf.omit(Return.clean(pfxdret,method="none"))
